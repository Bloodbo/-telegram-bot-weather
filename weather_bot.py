import requests
import time
from datetime import datetime

# –í—Å—Ç–∞–≤—å —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = '7285312566:AAF2xZHj29OC2fH05JopHR0vzIvSKkARjPs'
OPENWEATHERMAP_API_KEY = 'fecd18c530815576fd093eb555fef275'
BASE_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–º–∞–π–ª–∏–∫–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
WEATHER_DESCRIPTIONS = {
    'Clear': '—è—Å–Ω–æ',
    'Clouds': '–æ–±–ª–∞—á–Ω–æ',
    'Rain': '–¥–æ–∂–¥—å',
    'Drizzle': '–º–æ—Ä–æ—Å—å',
    'Thunderstorm': '–≥—Ä–æ–∑–∞',
    'Snow': '—Å–Ω–µ–≥',
    'Mist': '—Ç—É–º–∞–Ω',
}
WEATHER_EMOJIS = {
    'Clear': '‚òÄÔ∏è',
    'Clouds': '‚òÅÔ∏è',
    'Rain': 'üåßÔ∏è',
    'Drizzle': 'üå¶Ô∏è',
    'Thunderstorm': '‚õàÔ∏è',
    'Snow': '‚ùÑÔ∏è',
    'Mist': 'üå´Ô∏è',
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
def get_weather(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHERMAP_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    data = response.json()

    if data.get("cod") != 200:
        return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω."

    temp = data['main']['temp']
    feels_like = data['main']['feels_like']
    humidity = data['main']['humidity']
    pressure = data['main']['pressure']
    wind_speed = data['wind']['speed']
    description = data['weather'][0]['description']
    weather_main = data['weather'][0]['main']
    emoji = WEATHER_EMOJIS.get(weather_main, '')
    weather_desc = WEATHER_DESCRIPTIONS.get(weather_main, description)

    return (f"–ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C {emoji}\n"
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather_desc.capitalize()}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
def get_forecast(city):
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={OPENWEATHERMAP_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    data = response.json()

    if data.get("cod") != "200":
        return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω."

    forecast = {}
    for entry in data['list']:
        # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        date_time = entry['dt_txt']
        date = date_time.split(' ')[0]
        time_of_day = date_time.split(' ')[1][:5]  # –ß–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
        temp = entry['main']['temp']
        description = entry['weather'][0]['description']
        weather_main = entry['weather'][0]['main']
        emoji = WEATHER_EMOJIS.get(weather_main, '')
        weather_desc = WEATHER_DESCRIPTIONS.get(weather_main, description)

        if date not in forecast:
            forecast[date] = []
        forecast[date].append(f"{time_of_day}: {temp}¬∞C {emoji} ({weather_desc})")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –Ω–∞ 5 –¥–Ω–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏ –¥–Ω—è
    forecast_message = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city} –Ω–∞ 5 –¥–Ω–µ–π:\n"
    for date, weather_list in forecast.items():
        forecast_message += f"\n{datetime.strptime(date, '%Y-%m-%d').strftime('%d %B')}:\n"
        forecast_message += "\n".join(weather_list[:3])  # –£—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä (3 –ø–µ—Ä–∏–æ–¥–∞)
    return forecast_message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram API
def send_message(chat_id, text):
    url = BASE_URL + f"sendMessage?chat_id={chat_id}&text={text}"
    requests.get(url)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_updates(updates):
    for update in updates:
        message = update.get("message")
        if message:
            chat_id = message["chat"]["id"]
            text = message.get("text")

            if text == "/start":
                send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–≥–æ–¥—ã. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π.")
            elif text.startswith("/weather"):
                city = text.split("/weather ", 1)[1] if " " in text else ""
                if city:
                    weather_info = get_weather(city)
                    send_message(chat_id, weather_info)
                else:
                    send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /weather.")
            elif text:  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞
                forecast_info = get_forecast(text)
                send_message(chat_id, forecast_info)
            else:
                send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram
def get_updates(offset=None):
    url = BASE_URL + "getUpdates"
    if offset:
        url += f"?offset={offset}"
    response = requests.get(url)
    return response.json()["result"]

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def main():
    offset = None
    while True:
        updates = get_updates(offset)
        if updates:
            offset = updates[-1]["update_id"] + 1
            handle_updates(updates)
        time.sleep(1)

if __name__ == "__main__":
    main()
